% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_data.R
\name{gen_Nmix_open}
\alias{gen_Nmix_open}
\title{gen_Nmix_open}
\usage{
gen_Nmix_open(num_sites, num_times, lambda, pdet, omega, gamma,
  starts = NULL)
}
\arguments{
\item{num_sites}{The number of observation sites.}

\item{num_times}{The number of sampling occasions.}

\item{lambda}{The population rate parameter (\eqn{N_i \sim Poisson(\lambda)}).}

\item{pdet}{The probability of detection \eqn{p} (\eqn{n_{it} \sim Binomial(N_i,p)}).}

\item{omega}{The probability of survival (\eqn{S_{it} \sim Binomial(N_{it}, \omega)}). Either a single number, or a vector of length t-1 (omega for each sampling occassion after the first).}

\item{gamma}{The recruitment rate parameter (\eqn{G_{it} \sim Poisson(\gamma)}). Either a single number, or a vector of length t-1 (gamma for each sampling occassion after the first).}

\item{starts}{If not NULL, a vector of starting population values (used instead of lambda).}
}
\value{
A list object with two named matrices. Nit contains the total population per site
        (each row represents a site, each column a sampling occasion). nit contains the observed
        counts (rows=sites, columns=sampling occasions).
}
\description{
Generate a population/observation pair with the structure of an open N-mixture model. Use cbind_pop() and rbind_pop() functions to combine sub-pops to easily add covariate structures.
}
\examples{
pop <- gen_Nmix_open(num_sites = 5,
                     num_times = 10,
                     lambda = 50,
                     pdet = 0.4,
                     omega = 0.8,
                     gamma = 4)
pop

# example with time covariate for omega:
pop_a <- gen_Nmix_open(2,4,50,0.75,0.9,1) # survival=90\%
pop_b <- gen_Nmix_open(2,4,50,0.75,0.1,1, starts=pop_a$Ni[,4]) # survival=10\%, use last time observation from pop_a to start pop_b, then drop first time observation from pop_b (this makes a seamless transition between pop_a and pop_b)
pop_b <- list(Ni=pop_b$Ni[,-1], nit=pop_b$nit[,-1])
pop   <- cbind_pops(pop_a,pop_b) # combine to produce one population list
pop
}
